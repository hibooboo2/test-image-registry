user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;


events {
  worker_connections  1024;
}


http {
    include /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # uncomment if you want a 301 redirect for users attempting to connect
    # on port 80
    # NOTE: docker client will still fail. This is just for convenience
    # server {
    #   listen *:80;
    #   server_name my.docker.registry.com;
    #   return 301 https://$server_name$request_uri;
    # }

    server {
        listen 443 ssl;
        server_name registry.rancher.io;
        ssl on;
        ssl_certificate /etc/nginx/certs/registry.rancher.io.crt;
        ssl_certificate_key /etc/nginx/certs/registry.rancher.io.key;

        client_max_body_size 0; # disable any limits to avoid HTTP 413 for large image uploads
        root /etc/nginx/src/;
        # required to avoid HTTP 411: see Issue #1486 (https://github.com/dotcloud/docker/issues/1486)
        #chunkin on;
        #error_page 411 = @my_411_error;
        #location @my_411_error {
        #            chunkin_resume;
        #}
        location / {
            auth_basic            "Restricted";
            auth_basic_user_file  /etc/nginx/.htpasswd;
            include /etc/nginx/docker-registry.conf;
        }

        location /signup {
            auth_basic            off;
            proxy_pass                       http://node:8080;
        }

        location /_ping {
            auth_basic off;
            include /etc/nginx/docker-registry.conf;
        }

        location /v1/_ping {
            auth_basic off;
            include /etc/nginx/docker-registry.conf;
        }

    }
}
